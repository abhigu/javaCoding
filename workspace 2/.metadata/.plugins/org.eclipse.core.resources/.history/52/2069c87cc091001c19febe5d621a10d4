package Viruses;

import java.util.Random;

/** 
 * Simulation class responsible for conducting the propagation. Consists of an overall while loop that runs, incrementing the day and running the newDay method, which heals, infects, and kills a certain amount of people because of the infection by using other methods present in the class. After their variables and stats are changed in this method, the Population class conducts the final moving of these Nodes into their new respective lists.
 * @author Abhijit this is fancy
 *
 */
public class Simulation2 {
	private Random rand = new Random();	
	
	private int day;
	private Population population;
	private Variant firstVariant;
	/**
	 * @param population: A list of Nodes of which the Virus (Variant) propagates through.
	 * @param firstVarient
	 */
	public Simulation2(Population population, Variant firstVariant) {
		this.population = population;
		this.firstVariant = firstVariant;
		this.day = 1;
		
		population.patient0.varient = firstVariant;
	}
	
	public void epidemic() {
		while(population.sizeDeadandInfected() < population.size() && population.infected.size() > 0) {
			newDay();
		}
		newDay();
		//newDay();
		//newDay();
	}
	
	public void newDay() {
		System.out.println(this); 
		
		day++;
		
		for(Node person : population.infected) {
			person.checkHealed(day);
		}

		population.move(population.infected, population.notInfected, (person) -> person.varient == null);
		
		for(Node person : population.infected) {
			infect(person);
		}

		population.move(population.notInfected, population.infected, (person) -> person.varient != null);
		
		for (Node person : population.infected) {

			kill(person);
		}

		population.move(population.infected, population.dead, (person) -> !person.living);
	}

	public void infect(Node person) {
		if(population.notInfected.size() == 0 ) {
			return; 
		}
		
		double rate = person.varient.rate;
	
		Node target;
		
		for(int i = 0; i < rate; i++) {
			target = population.notInfected.get(rand.nextInt(population.notInfected.size()));
		
			if(target.varient == null && !(target.isImmune(person.varient))) {
				target.infect(person.varient, this.day);
			}
		}
	}
	
	public void kill(Node person) {
		double deathRate = person.varient.deathRate;
	
		if(rand.nextDouble() < deathRate) {
			person.living = false;
		}
	}
	
	@Override
	public String toString() {
		String output = "";
		
		output += "\nDay: " + day;
		output += "\nHealthy: " + population.notInfected.size();  
		output += "\nInfected: " + population.infected.size();
		output += "\nDead: " + population.dead.size();
		
		return output;
	}
	 
	public static void main(String[] args) {
		Simulation2 sim = new Simulation2(new Population(1000), new Variant(999999999, 0.2, .9, 999999999) );
		
		sim.epidemic();
	}

}




//Each day, we loop through each infected node. Using the rate variable of variant each node is infected with, 
//we infect the other nodes from the specified node of a for loop. Infected nodes go to infected list. 

//Each day, we loop through each infected node. We use the death rate variable of the infected node's variant to 
//determine if the infected node dies. If no death, nothing changes, if death, moves to dead list. 

//Once out of nodes in nonInfected, epidemic ends.

//Possibly break up code into different methods.

/*
 * Do incubation
 * Limit the amount someone can be infected 
 * They can't be infected again with that specific variant (immunity)
 * 
 * Do mutations
 * Do density multipliers for the infection rate
 * 
 * Combine similar "move" methods
 */