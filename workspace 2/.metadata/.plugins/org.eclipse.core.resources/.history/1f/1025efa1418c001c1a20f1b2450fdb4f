package Viruses;

import java.util.Random;

/*
 * Do incubation
 * Limit the amount someone can be infected 
 * They can't be infected again with that specific variant (immunity)
 * 
 * Do mutations
 * Do density multipliers for the infection rate
 * 
 * Combine similar "move" methods
 */


public class Simulation2 {
	private Random rand = new Random();	
	
	private int day;
	private Population population;
	private Varient firstVarient;
	
	public Simulation2(Population population, Varient firstVarient) {
		this.population = population;
		this.firstVarient = firstVarient;
		this.day = 1;
		
		population.patient0.varient = firstVarient;
	}
	
	public void epidemic() {
		while(population.sizeDeadandInfected() < population.size() && population.infected.size() > 0) {
			newDay();
		}
		newDay();
		//newDay();
		//newDay();
	}
	
	public void newDay() {
		System.out.println(this); 
		
		day++;
		
		for(Node person : population.infected) {
			person.checkHealed(day);
		}
		//moveHealthy();
		population.move(population.infected, population.notInfected, (person) -> person.varient == null);
		
		for(Node person : population.infected) {
			infect(person);
		}
		//moveInfected();
		population.move(population.notInfected, population.infected, (person) -> person.varient != null);
		
		for (Node person : population.infected) {

			kill(person);
		}
		//moveDead();
		population.move(population.infected, population.dead, (person) -> !person.living);
	}

	public void infect(Node person) {
		double rate = person.varient.rate;
	
		Node target;
		
		for(int i = 0; i < rate; i++) {
			target = population.notInfected.get(rand.nextInt(population.notInfected.size()));
		
			if(target.varient == null && !(target.isImmune(person.varient))) {
				target.infect(person.varient, this.day);
			}
		}
	}
	
	public void kill(Node person) {
		double deathRate = person.varient.deathRate;
	
		if(rand.nextDouble() < deathRate) {
			person.living = false;
		}
	}
	
	@Override
	public String toString() {
		String output = "";
		
		output += "\nDay: " + day;
		output += "\nHealthy: " + population.notInfected.size();
		output += "\nInfected: " + population.infected.size();
		output += "\nDead: " + population.dead.size();
		
		return output;
	}
	
	public static void main(String[] args) {
		Simulation2 sim = new Simulation2(new Population(1000), new Varient(6, 0.1, .9, 1) );
		
		sim.epidemic();
	}
	
	//Each day, we loop through each infected node. Using the rate variable of variant each node is infected with, 
	//we infect the other nodes from the specified node of a for loop. Infected nodes go to infected list. 
	
	//Each day, we loop through each infected node. We use the death rate variable of the infected node's variant to 
	//determine if the infected node dies. If no death, nothing changes, if death, moves to dead list. 
	
	//Once out of nodes in nonInfected, epidemic ends.
	
	//Possibly break up code into different methods.
}
